https://ryanstutorials.net/bash-scripting-tutorial/
https://linuxconfig.org/bash-scripting-tutorial-for-beginners
https://www.shellscript.sh


!!!!!! Interacting with the Command Line Shell
##### Basic Linux Commands
##### Redirecting Streams
	./stdout_example.py > new_file.txt - вывод stdout в файл (файл создается, перезатирается)
	./stdout_example.py >> new_file.txt - вывод stdout - добавление к сдержимому файла
	./streams_err.py < new_file.txt - отправка файла на stdin скрипта
	(отправляется все до первого символа новой строки)
	2> - редирект stderr
	./streams_err.py < new_file.txt 2> error_file.txt
	Дескрипторы файлов:
	0 - stdin
	1 - stdout
	2 - stderr
##### Pipes and Pipelines
	stdout одной программы на stdin другой
	ls -l | less
	cat spider.txt | tr ' ' '\n' | sort | uniq -c | sort -nr | head
	tr = translate (заменить проблем на символ новой строки, перевоим слова на новую строку)
	sort - сортировка в алфавитном порядке
	uniq  - оставляет уникальные значения, флаг -c = показывает количество повторений
	sort -nr = сортировка по номерам в обратном порядке
##### Signalling Processes

!!!!!! Bash Scripting
##### Creating Bash Scripts
#!/bin/bash

echo "Starting at: $(date)"; echo

echo "UPTIME"; uptime; echo

echo "FREE"; free; echo

echo "WHO"
who
echo

echo "Finishing at: $(date)"; 

##### Using Variables and Globs
	example=hello - без пробелов

#!/bin/bash
line='----------------------'
echo "Starting at: $(date)"; echo $line

echo "UPTIME"; uptime; echo $line

echo "FREE"; free; echo $line

echo "WHO"
who
echo $line

echo "Finishing at: $(date)";

	globs - позволяют создавать списки файлов (по маске)
	echo *.py
	echo c*
	echo ?????.py
##### Conditional Execution in Bash
	В bash скриптах, используемое условие основано на статусе выхода команд
	echo $? - выходной статус команды
	if ; then; fi
-
	#!/bin/bash

	if grep "127.0.0.1" /etc/hosts; then
		echo "everything ok"
	else
		echo "127.0.0.1 not in /etc/hosts"
	fi
-

	test - командв проверки выполнения условия
	test -n - проверяет что строка не пустая
	if test -n "$PATH"; then echo "PATH is not empty"; fi
	алиас команды test = []
	if [ -n "$PATH" ]; then echo "PATH is not empty"; fi
!!!!!! Advanced Bash Concepts
##### While Loops in Bash Scripts
#!/bin/bash

n=1
while [ $n -le 5 ]; do
   echo "Iteration number $n"
   ((n+=1))
done

	-le = меньше или равно
	loop между do и done
	(()) - bash конструкция двойных скобок, позволяет нам выполнять арифметические операции с переменными.  

random-exit.py
#!/usr/bin/python3.6

import sys
import random

value=random.randint(0,3)
print("Returning: "+str(value))
sys.exit(value)

retry.sh
#!/bin/bash

n=0
command=$1
while ! $command && [ $n -le 5 ]; do
   sleep $n
   ((n=n+1))
   echo "Retry #$n"
done;

./retry.sh ./random-exit.py

##### For Loops in Bash Scripts

	Цикл for нужен для итерирования по списку. В баше список приводится через пробел
#!/bin/bash

for fruit in apple orange peach; do
	echo "I like $fruit!";
done;

	С помощью ? и * можно итерировать по спискам файлов
	basename берет файл и расширение (хвост), дает на выходе имя без расширения
	$basename test.sh t.sh
	tes

rename.sh
#!/bin/bash

for file in *.HTM; do
	name=$(basename "$file" .HTM) -- кавычки нужны для файлов с пробелами
	echo mv "$file" "$name.html" -- сначала делаем эхо, чтобы посмотреть предварительный результат, 
done;

снчала жедаем
##### Advanced Command Interaction
команда cut позволяет резать строки через разделитель
tail /var/log/syslog | cut -d' ' -f5-
-d' '  -- разделитель пробел
-f5- -- 5 поле и все что после

cut -d' ' -f5- /var/log/sysylog | sort | uniq -c | sort -nr | head
---
toploglines.sh
#!/bin/bash

for logfile in /var/log/*log; do
	echo "Processing: $logfile"
	cut -d' ' -f5- $logfile | sort | uniq -c | sort -nr | head -5
done
---

##### Choosing Between Bash and Python



Basic Linux Commands Cheat-Sheet

Managing files and directories
	cd directory: changes the current working directory to the specified one
	pwd: prints the current working directory
	ls: lists the contents of the current directory
	ls directory: lists the contents of the received directory  
	ls -l: lists the additional information for the contents of the directory  
	ls -a: lists all files, including those hidden  
	ls -la: applies both the -l and the -a flags  
	mkdir directory: creates the directory with the received name
	rmdir directory: deletes the directory with the received name (if empty)
	cp old_name new_name: copies old_name into new_name
	mv old_name new_name: moves old_name into new_name
	touch file_name: creates an empty file or updates the modified time if it exists
	chmod modifiers files: changes the permissions for the files according to the provided modifiers; we've seen +x to make the file executable
	chown user files: changes the owner of the files to the given user
	chgrp group files: changes the group of the files to the given group

Operating with the content of files
	cat file: shows the content of the file through standard output
	wc file: counts the amount of characters, words, and lines in the given file; can also count the same values of whatever it receives via stdin
	file file: prints the type of the given file, as recognized by the operating system
	head file: shows the first 10 lines of the given file
	tail file: shows the last 10 lines of the given file
	less file: scrolls through the contents of the given file (press "q" to quit)
	sort file: sorts the lines of the file alphabetically
	cut -dseparator -ffields file: for each line in the given file, splits the line according to the given separator and prints the given fields (starting from 1)

Additional commands
	echo "message": prints the message to standard output
	date: prints the current date
	who: prints the list of users currently logged into the computer
	man command: shows the manual page of the given command; manual pages contain a lot of information explaining how to use each command (press "q" to quit)
	uptime: shows how long the computer has been running
	free: shows the amount of unused memory on the current system


Redirections, Pipes and Signals
Managing streams
These are the redirectors that we can use to take control of the streams of our programs
	command > file: redirects standard output, overwrites file
	command >> file: redirects standard output, appends to file
	command < file: redirects standard input from file
	command 2> file: redirects standard error to file
	command1 | command2: connects the output of command1 to the input of command2

Operating with processes
These are some commands that are useful to know in Linux when interacting with processes. Not all of them are explained in videos, so feel free to investigate them on your own.
	ps: lists the processes executing in the current terminal for the current user
	ps ax: lists all processes currently executing for all users  
	ps e: shows the environment for the processes listed  
	kill PID: sends the SIGTERM signal to the process identified by PID
	fg: causes a job that was stopped or in the background to return to the foreground
	bg: causes a job that was stopped to go to the background
	jobs: lists the jobs currently running or stopped
	top: shows the processes currently using the most CPU time (press "q" to quit)  